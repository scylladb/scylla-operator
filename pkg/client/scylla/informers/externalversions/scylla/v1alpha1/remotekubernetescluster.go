// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apiscyllav1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	versioned "github.com/scylladb/scylla-operator/pkg/client/scylla/clientset/versioned"
	internalinterfaces "github.com/scylladb/scylla-operator/pkg/client/scylla/informers/externalversions/internalinterfaces"
	scyllav1alpha1 "github.com/scylladb/scylla-operator/pkg/client/scylla/listers/scylla/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// RemoteKubernetesClusterInformer provides access to a shared informer and lister for
// RemoteKubernetesClusters.
type RemoteKubernetesClusterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() scyllav1alpha1.RemoteKubernetesClusterLister
}

type remoteKubernetesClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewRemoteKubernetesClusterInformer constructs a new informer for RemoteKubernetesCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRemoteKubernetesClusterInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRemoteKubernetesClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredRemoteKubernetesClusterInformer constructs a new informer for RemoteKubernetesCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRemoteKubernetesClusterInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ScyllaV1alpha1().RemoteKubernetesClusters().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ScyllaV1alpha1().RemoteKubernetesClusters().Watch(context.TODO(), options)
			},
		},
		&apiscyllav1alpha1.RemoteKubernetesCluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *remoteKubernetesClusterInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRemoteKubernetesClusterInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *remoteKubernetesClusterInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiscyllav1alpha1.RemoteKubernetesCluster{}, f.defaultInformer)
}

func (f *remoteKubernetesClusterInformer) Lister() scyllav1alpha1.RemoteKubernetesClusterLister {
	return scyllav1alpha1.NewRemoteKubernetesClusterLister(f.Informer().GetIndexer())
}
