// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScyllaClusterManagerLister helps list ScyllaClusterManagers.
// All objects returned here must be treated as read-only.
type ScyllaClusterManagerLister interface {
	// List lists all ScyllaClusterManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaClusterManager, err error)
	// ScyllaClusterManagers returns an object that can list and get ScyllaClusterManagers.
	ScyllaClusterManagers(namespace string) ScyllaClusterManagerNamespaceLister
	ScyllaClusterManagerListerExpansion
}

// scyllaClusterManagerLister implements the ScyllaClusterManagerLister interface.
type scyllaClusterManagerLister struct {
	indexer cache.Indexer
}

// NewScyllaClusterManagerLister returns a new ScyllaClusterManagerLister.
func NewScyllaClusterManagerLister(indexer cache.Indexer) ScyllaClusterManagerLister {
	return &scyllaClusterManagerLister{indexer: indexer}
}

// List lists all ScyllaClusterManagers in the indexer.
func (s *scyllaClusterManagerLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaClusterManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaClusterManager))
	})
	return ret, err
}

// ScyllaClusterManagers returns an object that can list and get ScyllaClusterManagers.
func (s *scyllaClusterManagerLister) ScyllaClusterManagers(namespace string) ScyllaClusterManagerNamespaceLister {
	return scyllaClusterManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScyllaClusterManagerNamespaceLister helps list and get ScyllaClusterManagers.
// All objects returned here must be treated as read-only.
type ScyllaClusterManagerNamespaceLister interface {
	// List lists all ScyllaClusterManagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaClusterManager, err error)
	// Get retrieves the ScyllaClusterManager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScyllaClusterManager, error)
	ScyllaClusterManagerNamespaceListerExpansion
}

// scyllaClusterManagerNamespaceLister implements the ScyllaClusterManagerNamespaceLister
// interface.
type scyllaClusterManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScyllaClusterManagers in the indexer for a given namespace.
func (s scyllaClusterManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaClusterManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaClusterManager))
	})
	return ret, err
}

// Get retrieves the ScyllaClusterManager from the indexer for a given namespace and name.
func (s scyllaClusterManagerNamespaceLister) Get(name string) (*v1alpha1.ScyllaClusterManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scyllaclustermanager"), name)
	}
	return obj.(*v1alpha1.ScyllaClusterManager), nil
}
