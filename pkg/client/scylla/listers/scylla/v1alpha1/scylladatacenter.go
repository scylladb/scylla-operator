// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScyllaDatacenterLister helps list ScyllaDatacenters.
// All objects returned here must be treated as read-only.
type ScyllaDatacenterLister interface {
	// List lists all ScyllaDatacenters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaDatacenter, err error)
	// ScyllaDatacenters returns an object that can list and get ScyllaDatacenters.
	ScyllaDatacenters(namespace string) ScyllaDatacenterNamespaceLister
	ScyllaDatacenterListerExpansion
}

// scyllaDatacenterLister implements the ScyllaDatacenterLister interface.
type scyllaDatacenterLister struct {
	indexer cache.Indexer
}

// NewScyllaDatacenterLister returns a new ScyllaDatacenterLister.
func NewScyllaDatacenterLister(indexer cache.Indexer) ScyllaDatacenterLister {
	return &scyllaDatacenterLister{indexer: indexer}
}

// List lists all ScyllaDatacenters in the indexer.
func (s *scyllaDatacenterLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaDatacenter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaDatacenter))
	})
	return ret, err
}

// ScyllaDatacenters returns an object that can list and get ScyllaDatacenters.
func (s *scyllaDatacenterLister) ScyllaDatacenters(namespace string) ScyllaDatacenterNamespaceLister {
	return scyllaDatacenterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScyllaDatacenterNamespaceLister helps list and get ScyllaDatacenters.
// All objects returned here must be treated as read-only.
type ScyllaDatacenterNamespaceLister interface {
	// List lists all ScyllaDatacenters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaDatacenter, err error)
	// Get retrieves the ScyllaDatacenter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScyllaDatacenter, error)
	ScyllaDatacenterNamespaceListerExpansion
}

// scyllaDatacenterNamespaceLister implements the ScyllaDatacenterNamespaceLister
// interface.
type scyllaDatacenterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScyllaDatacenters in the indexer for a given namespace.
func (s scyllaDatacenterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaDatacenter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaDatacenter))
	})
	return ret, err
}

// Get retrieves the ScyllaDatacenter from the indexer for a given namespace and name.
func (s scyllaDatacenterNamespaceLister) Get(name string) (*v1alpha1.ScyllaDatacenter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scylladatacenter"), name)
	}
	return obj.(*v1alpha1.ScyllaDatacenter), nil
}
