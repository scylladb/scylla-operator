// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScyllaDBDatacenterLister helps list ScyllaDBDatacenters.
// All objects returned here must be treated as read-only.
type ScyllaDBDatacenterLister interface {
	// List lists all ScyllaDBDatacenters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaDBDatacenter, err error)
	// ScyllaDBDatacenters returns an object that can list and get ScyllaDBDatacenters.
	ScyllaDBDatacenters(namespace string) ScyllaDBDatacenterNamespaceLister
	ScyllaDBDatacenterListerExpansion
}

// scyllaDBDatacenterLister implements the ScyllaDBDatacenterLister interface.
type scyllaDBDatacenterLister struct {
	indexer cache.Indexer
}

// NewScyllaDBDatacenterLister returns a new ScyllaDBDatacenterLister.
func NewScyllaDBDatacenterLister(indexer cache.Indexer) ScyllaDBDatacenterLister {
	return &scyllaDBDatacenterLister{indexer: indexer}
}

// List lists all ScyllaDBDatacenters in the indexer.
func (s *scyllaDBDatacenterLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaDBDatacenter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaDBDatacenter))
	})
	return ret, err
}

// ScyllaDBDatacenters returns an object that can list and get ScyllaDBDatacenters.
func (s *scyllaDBDatacenterLister) ScyllaDBDatacenters(namespace string) ScyllaDBDatacenterNamespaceLister {
	return scyllaDBDatacenterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScyllaDBDatacenterNamespaceLister helps list and get ScyllaDBDatacenters.
// All objects returned here must be treated as read-only.
type ScyllaDBDatacenterNamespaceLister interface {
	// List lists all ScyllaDBDatacenters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaDBDatacenter, err error)
	// Get retrieves the ScyllaDBDatacenter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScyllaDBDatacenter, error)
	ScyllaDBDatacenterNamespaceListerExpansion
}

// scyllaDBDatacenterNamespaceLister implements the ScyllaDBDatacenterNamespaceLister
// interface.
type scyllaDBDatacenterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScyllaDBDatacenters in the indexer for a given namespace.
func (s scyllaDBDatacenterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaDBDatacenter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaDBDatacenter))
	})
	return ret, err
}

// Get retrieves the ScyllaDBDatacenter from the indexer for a given namespace and name.
func (s scyllaDBDatacenterNamespaceLister) Get(name string) (*v1alpha1.ScyllaDBDatacenter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scylladbdatacenter"), name)
	}
	return obj.(*v1alpha1.ScyllaDBDatacenter), nil
}
