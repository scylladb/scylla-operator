// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScyllaManagerLister helps list ScyllaManagers.
// All objects returned here must be treated as read-only.
type ScyllaManagerLister interface {
	// List lists all ScyllaManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaManager, err error)
	// ScyllaManagers returns an object that can list and get ScyllaManagers.
	ScyllaManagers(namespace string) ScyllaManagerNamespaceLister
	ScyllaManagerListerExpansion
}

// scyllaManagerLister implements the ScyllaManagerLister interface.
type scyllaManagerLister struct {
	indexer cache.Indexer
}

// NewScyllaManagerLister returns a new ScyllaManagerLister.
func NewScyllaManagerLister(indexer cache.Indexer) ScyllaManagerLister {
	return &scyllaManagerLister{indexer: indexer}
}

// List lists all ScyllaManagers in the indexer.
func (s *scyllaManagerLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaManager))
	})
	return ret, err
}

// ScyllaManagers returns an object that can list and get ScyllaManagers.
func (s *scyllaManagerLister) ScyllaManagers(namespace string) ScyllaManagerNamespaceLister {
	return scyllaManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScyllaManagerNamespaceLister helps list and get ScyllaManagers.
// All objects returned here must be treated as read-only.
type ScyllaManagerNamespaceLister interface {
	// List lists all ScyllaManagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScyllaManager, err error)
	// Get retrieves the ScyllaManager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScyllaManager, error)
	ScyllaManagerNamespaceListerExpansion
}

// scyllaManagerNamespaceLister implements the ScyllaManagerNamespaceLister
// interface.
type scyllaManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScyllaManagers in the indexer for a given namespace.
func (s scyllaManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScyllaManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScyllaManager))
	})
	return ret, err
}

// Get retrieves the ScyllaManager from the indexer for a given namespace and name.
func (s scyllaManagerNamespaceLister) Get(name string) (*v1alpha1.ScyllaManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scyllamanager"), name)
	}
	return obj.(*v1alpha1.ScyllaManager), nil
}
