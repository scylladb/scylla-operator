// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteClusterClusterIDBackupsParams creates a new DeleteClusterClusterIDBackupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteClusterClusterIDBackupsParams() *DeleteClusterClusterIDBackupsParams {
	return &DeleteClusterClusterIDBackupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteClusterClusterIDBackupsParamsWithTimeout creates a new DeleteClusterClusterIDBackupsParams object
// with the ability to set a timeout on a request.
func NewDeleteClusterClusterIDBackupsParamsWithTimeout(timeout time.Duration) *DeleteClusterClusterIDBackupsParams {
	return &DeleteClusterClusterIDBackupsParams{
		timeout: timeout,
	}
}

// NewDeleteClusterClusterIDBackupsParamsWithContext creates a new DeleteClusterClusterIDBackupsParams object
// with the ability to set a context for a request.
func NewDeleteClusterClusterIDBackupsParamsWithContext(ctx context.Context) *DeleteClusterClusterIDBackupsParams {
	return &DeleteClusterClusterIDBackupsParams{
		Context: ctx,
	}
}

// NewDeleteClusterClusterIDBackupsParamsWithHTTPClient creates a new DeleteClusterClusterIDBackupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteClusterClusterIDBackupsParamsWithHTTPClient(client *http.Client) *DeleteClusterClusterIDBackupsParams {
	return &DeleteClusterClusterIDBackupsParams{
		HTTPClient: client,
	}
}

/*
DeleteClusterClusterIDBackupsParams contains all the parameters to send to the API endpoint

	for the delete cluster cluster ID backups operation.

	Typically these are written to a http.Request.
*/
type DeleteClusterClusterIDBackupsParams struct {

	// ClusterID.
	ClusterID string

	// Locations.
	Locations []string

	// SnapshotTags.
	SnapshotTags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete cluster cluster ID backups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteClusterClusterIDBackupsParams) WithDefaults() *DeleteClusterClusterIDBackupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete cluster cluster ID backups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteClusterClusterIDBackupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithTimeout(timeout time.Duration) *DeleteClusterClusterIDBackupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithContext(ctx context.Context) *DeleteClusterClusterIDBackupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithHTTPClient(client *http.Client) *DeleteClusterClusterIDBackupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithClusterID(clusterID string) *DeleteClusterClusterIDBackupsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithLocations adds the locations to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithLocations(locations []string) *DeleteClusterClusterIDBackupsParams {
	o.SetLocations(locations)
	return o
}

// SetLocations adds the locations to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetLocations(locations []string) {
	o.Locations = locations
}

// WithSnapshotTags adds the snapshotTags to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithSnapshotTags(snapshotTags []string) *DeleteClusterClusterIDBackupsParams {
	o.SetSnapshotTags(snapshotTags)
	return o
}

// SetSnapshotTags adds the snapshotTags to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetSnapshotTags(snapshotTags []string) {
	o.SnapshotTags = snapshotTags
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteClusterClusterIDBackupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	if o.Locations != nil {

		// binding items for locations
		joinedLocations := o.bindParamLocations(reg)

		// query array param locations
		if err := r.SetQueryParam("locations", joinedLocations...); err != nil {
			return err
		}
	}

	if o.SnapshotTags != nil {

		// binding items for snapshot_tags
		joinedSnapshotTags := o.bindParamSnapshotTags(reg)

		// query array param snapshot_tags
		if err := r.SetQueryParam("snapshot_tags", joinedSnapshotTags...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDeleteClusterClusterIDBackups binds the parameter locations
func (o *DeleteClusterClusterIDBackupsParams) bindParamLocations(formats strfmt.Registry) []string {
	locationsIR := o.Locations

	var locationsIC []string
	for _, locationsIIR := range locationsIR { // explode []string

		locationsIIV := locationsIIR // string as string
		locationsIC = append(locationsIC, locationsIIV)
	}

	// items.CollectionFormat: ""
	locationsIS := swag.JoinByFormat(locationsIC, "")

	return locationsIS
}

// bindParamDeleteClusterClusterIDBackups binds the parameter snapshot_tags
func (o *DeleteClusterClusterIDBackupsParams) bindParamSnapshotTags(formats strfmt.Registry) []string {
	snapshotTagsIR := o.SnapshotTags

	var snapshotTagsIC []string
	for _, snapshotTagsIIR := range snapshotTagsIR { // explode []string

		snapshotTagsIIV := snapshotTagsIIR // string as string
		snapshotTagsIC = append(snapshotTagsIC, snapshotTagsIIV)
	}

	// items.CollectionFormat: ""
	snapshotTagsIS := swag.JoinByFormat(snapshotTagsIC, "")

	return snapshotTagsIS
}
