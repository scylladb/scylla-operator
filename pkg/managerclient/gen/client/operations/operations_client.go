// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteClusterClusterID(params *DeleteClusterClusterIDParams, opts ...ClientOption) (*DeleteClusterClusterIDOK, error)

	DeleteClusterClusterIDBackups(params *DeleteClusterClusterIDBackupsParams, opts ...ClientOption) (*DeleteClusterClusterIDBackupsOK, error)

	DeleteClusterClusterIDTaskTaskTypeTaskID(params *DeleteClusterClusterIDTaskTaskTypeTaskIDParams, opts ...ClientOption) (*DeleteClusterClusterIDTaskTaskTypeTaskIDOK, error)

	GetClusterClusterID(params *GetClusterClusterIDParams, opts ...ClientOption) (*GetClusterClusterIDOK, error)

	GetClusterClusterIDBackups(params *GetClusterClusterIDBackupsParams, opts ...ClientOption) (*GetClusterClusterIDBackupsOK, error)

	GetClusterClusterIDBackupsFiles(params *GetClusterClusterIDBackupsFilesParams, opts ...ClientOption) (*GetClusterClusterIDBackupsFilesOK, error)

	GetClusterClusterIDStatus(params *GetClusterClusterIDStatusParams, opts ...ClientOption) (*GetClusterClusterIDStatusOK, error)

	GetClusterClusterIDSuspended(params *GetClusterClusterIDSuspendedParams, opts ...ClientOption) (*GetClusterClusterIDSuspendedOK, error)

	GetClusterClusterIDTaskBackupTaskIDRunID(params *GetClusterClusterIDTaskBackupTaskIDRunIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskBackupTaskIDRunIDOK, error)

	GetClusterClusterIDTaskRepairTaskIDRunID(params *GetClusterClusterIDTaskRepairTaskIDRunIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskRepairTaskIDRunIDOK, error)

	GetClusterClusterIDTaskTaskTypeTaskID(params *GetClusterClusterIDTaskTaskTypeTaskIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskTaskTypeTaskIDOK, error)

	GetClusterClusterIDTaskTaskTypeTaskIDHistory(params *GetClusterClusterIDTaskTaskTypeTaskIDHistoryParams, opts ...ClientOption) (*GetClusterClusterIDTaskTaskTypeTaskIDHistoryOK, error)

	GetClusterClusterIDTaskValidateBackupTaskIDRunID(params *GetClusterClusterIDTaskValidateBackupTaskIDRunIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskValidateBackupTaskIDRunIDOK, error)

	GetClusterClusterIDTasks(params *GetClusterClusterIDTasksParams, opts ...ClientOption) (*GetClusterClusterIDTasksOK, error)

	GetClusterClusterIDTasksBackupTarget(params *GetClusterClusterIDTasksBackupTargetParams, opts ...ClientOption) (*GetClusterClusterIDTasksBackupTargetOK, error)

	GetClusterClusterIDTasksRepairTarget(params *GetClusterClusterIDTasksRepairTargetParams, opts ...ClientOption) (*GetClusterClusterIDTasksRepairTargetOK, error)

	GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error)

	GetVersion(params *GetVersionParams, opts ...ClientOption) (*GetVersionOK, error)

	PostClusterClusterIDTasks(params *PostClusterClusterIDTasksParams, opts ...ClientOption) (*PostClusterClusterIDTasksCreated, error)

	PostClusters(params *PostClustersParams, opts ...ClientOption) (*PostClustersCreated, error)

	PutClusterClusterID(params *PutClusterClusterIDParams, opts ...ClientOption) (*PutClusterClusterIDOK, error)

	PutClusterClusterIDRepairsIntensity(params *PutClusterClusterIDRepairsIntensityParams, opts ...ClientOption) (*PutClusterClusterIDRepairsIntensityOK, error)

	PutClusterClusterIDRepairsParallel(params *PutClusterClusterIDRepairsParallelParams, opts ...ClientOption) (*PutClusterClusterIDRepairsParallelOK, error)

	PutClusterClusterIDSuspended(params *PutClusterClusterIDSuspendedParams, opts ...ClientOption) (*PutClusterClusterIDSuspendedOK, error)

	PutClusterClusterIDTaskTaskTypeTaskID(params *PutClusterClusterIDTaskTaskTypeTaskIDParams, opts ...ClientOption) (*PutClusterClusterIDTaskTaskTypeTaskIDOK, error)

	PutClusterClusterIDTaskTaskTypeTaskIDStart(params *PutClusterClusterIDTaskTaskTypeTaskIDStartParams, opts ...ClientOption) (*PutClusterClusterIDTaskTaskTypeTaskIDStartOK, error)

	PutClusterClusterIDTaskTaskTypeTaskIDStop(params *PutClusterClusterIDTaskTaskTypeTaskIDStopParams, opts ...ClientOption) (*PutClusterClusterIDTaskTaskTypeTaskIDStopOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteClusterClusterID delete cluster cluster ID API
*/
func (a *Client) DeleteClusterClusterID(params *DeleteClusterClusterIDParams, opts ...ClientOption) (*DeleteClusterClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterClusterID",
		Method:             "DELETE",
		PathPattern:        "/cluster/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterClusterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterClusterIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteClusterClusterIDBackups delete cluster cluster ID backups API
*/
func (a *Client) DeleteClusterClusterIDBackups(params *DeleteClusterClusterIDBackupsParams, opts ...ClientOption) (*DeleteClusterClusterIDBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterClusterIDBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterClusterIDBackups",
		Method:             "DELETE",
		PathPattern:        "/cluster/{cluster_id}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterClusterIDBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterClusterIDBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterClusterIDBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteClusterClusterIDTaskTaskTypeTaskID delete cluster cluster ID task task type task ID API
*/
func (a *Client) DeleteClusterClusterIDTaskTaskTypeTaskID(params *DeleteClusterClusterIDTaskTaskTypeTaskIDParams, opts ...ClientOption) (*DeleteClusterClusterIDTaskTaskTypeTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterClusterIDTaskTaskTypeTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterClusterIDTaskTaskTypeTaskID",
		Method:             "DELETE",
		PathPattern:        "/cluster/{cluster_id}/task/{task_type}/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterClusterIDTaskTaskTypeTaskIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterClusterIDTaskTaskTypeTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterClusterIDTaskTaskTypeTaskIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterID get cluster cluster ID API
*/
func (a *Client) GetClusterClusterID(params *GetClusterClusterIDParams, opts ...ClientOption) (*GetClusterClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDBackups get cluster cluster ID backups API
*/
func (a *Client) GetClusterClusterIDBackups(params *GetClusterClusterIDBackupsParams, opts ...ClientOption) (*GetClusterClusterIDBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDBackups",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDBackupsFiles get cluster cluster ID backups files API
*/
func (a *Client) GetClusterClusterIDBackupsFiles(params *GetClusterClusterIDBackupsFilesParams, opts ...ClientOption) (*GetClusterClusterIDBackupsFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDBackupsFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDBackupsFiles",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/backups/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDBackupsFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDBackupsFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDBackupsFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDStatus get cluster cluster ID status API
*/
func (a *Client) GetClusterClusterIDStatus(params *GetClusterClusterIDStatusParams, opts ...ClientOption) (*GetClusterClusterIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDStatus",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDSuspended get cluster cluster ID suspended API
*/
func (a *Client) GetClusterClusterIDSuspended(params *GetClusterClusterIDSuspendedParams, opts ...ClientOption) (*GetClusterClusterIDSuspendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDSuspendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDSuspended",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/suspended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDSuspendedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDSuspendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDSuspendedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTaskBackupTaskIDRunID get cluster cluster ID task backup task ID run ID API
*/
func (a *Client) GetClusterClusterIDTaskBackupTaskIDRunID(params *GetClusterClusterIDTaskBackupTaskIDRunIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskBackupTaskIDRunIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTaskBackupTaskIDRunIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTaskBackupTaskIDRunID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/task/backup/{task_id}/{run_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTaskBackupTaskIDRunIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTaskBackupTaskIDRunIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTaskBackupTaskIDRunIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTaskRepairTaskIDRunID get cluster cluster ID task repair task ID run ID API
*/
func (a *Client) GetClusterClusterIDTaskRepairTaskIDRunID(params *GetClusterClusterIDTaskRepairTaskIDRunIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskRepairTaskIDRunIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTaskRepairTaskIDRunIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTaskRepairTaskIDRunID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/task/repair/{task_id}/{run_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTaskRepairTaskIDRunIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTaskRepairTaskIDRunIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTaskRepairTaskIDRunIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTaskTaskTypeTaskID get cluster cluster ID task task type task ID API
*/
func (a *Client) GetClusterClusterIDTaskTaskTypeTaskID(params *GetClusterClusterIDTaskTaskTypeTaskIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskTaskTypeTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTaskTaskTypeTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTaskTaskTypeTaskID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/task/{task_type}/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTaskTaskTypeTaskIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTaskTaskTypeTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTaskTaskTypeTaskIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTaskTaskTypeTaskIDHistory get cluster cluster ID task task type task ID history API
*/
func (a *Client) GetClusterClusterIDTaskTaskTypeTaskIDHistory(params *GetClusterClusterIDTaskTaskTypeTaskIDHistoryParams, opts ...ClientOption) (*GetClusterClusterIDTaskTaskTypeTaskIDHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTaskTaskTypeTaskIDHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTaskTaskTypeTaskIDHistory",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/task/{task_type}/{task_id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTaskTaskTypeTaskIDHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTaskTaskTypeTaskIDHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTaskTaskTypeTaskIDHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTaskValidateBackupTaskIDRunID get cluster cluster ID task validate backup task ID run ID API
*/
func (a *Client) GetClusterClusterIDTaskValidateBackupTaskIDRunID(params *GetClusterClusterIDTaskValidateBackupTaskIDRunIDParams, opts ...ClientOption) (*GetClusterClusterIDTaskValidateBackupTaskIDRunIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTaskValidateBackupTaskIDRunIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTaskValidateBackupTaskIDRunID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/task/validate_backup/{task_id}/{run_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTaskValidateBackupTaskIDRunIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTaskValidateBackupTaskIDRunIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTaskValidateBackupTaskIDRunIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTasks get cluster cluster ID tasks API
*/
func (a *Client) GetClusterClusterIDTasks(params *GetClusterClusterIDTasksParams, opts ...ClientOption) (*GetClusterClusterIDTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTasks",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTasksBackupTarget get cluster cluster ID tasks backup target API
*/
func (a *Client) GetClusterClusterIDTasksBackupTarget(params *GetClusterClusterIDTasksBackupTargetParams, opts ...ClientOption) (*GetClusterClusterIDTasksBackupTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTasksBackupTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTasksBackupTarget",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/tasks/backup/target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTasksBackupTargetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTasksBackupTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTasksBackupTargetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterClusterIDTasksRepairTarget get cluster cluster ID tasks repair target API
*/
func (a *Client) GetClusterClusterIDTasksRepairTarget(params *GetClusterClusterIDTasksRepairTargetParams, opts ...ClientOption) (*GetClusterClusterIDTasksRepairTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDTasksRepairTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterClusterIDTasksRepairTarget",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/tasks/repair/target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDTasksRepairTargetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterClusterIDTasksRepairTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterClusterIDTasksRepairTargetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusters get clusters API
*/
func (a *Client) GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusters",
		Method:             "GET",
		PathPattern:        "/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVersion get version API
*/
func (a *Client) GetVersion(params *GetVersionParams, opts ...ClientOption) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVersion",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostClusterClusterIDTasks post cluster cluster ID tasks API
*/
func (a *Client) PostClusterClusterIDTasks(params *PostClusterClusterIDTasksParams, opts ...ClientOption) (*PostClusterClusterIDTasksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClusterClusterIDTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostClusterClusterIDTasks",
		Method:             "POST",
		PathPattern:        "/cluster/{cluster_id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostClusterClusterIDTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClusterClusterIDTasksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostClusterClusterIDTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostClusters post clusters API
*/
func (a *Client) PostClusters(params *PostClustersParams, opts ...ClientOption) (*PostClustersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostClusters",
		Method:             "POST",
		PathPattern:        "/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClustersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterID put cluster cluster ID API
*/
func (a *Client) PutClusterClusterID(params *PutClusterClusterIDParams, opts ...ClientOption) (*PutClusterClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterID",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterIDRepairsIntensity put cluster cluster ID repairs intensity API
*/
func (a *Client) PutClusterClusterIDRepairsIntensity(params *PutClusterClusterIDRepairsIntensityParams, opts ...ClientOption) (*PutClusterClusterIDRepairsIntensityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDRepairsIntensityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterIDRepairsIntensity",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/repairs/intensity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDRepairsIntensityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDRepairsIntensityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDRepairsIntensityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterIDRepairsParallel put cluster cluster ID repairs parallel API
*/
func (a *Client) PutClusterClusterIDRepairsParallel(params *PutClusterClusterIDRepairsParallelParams, opts ...ClientOption) (*PutClusterClusterIDRepairsParallelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDRepairsParallelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterIDRepairsParallel",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/repairs/parallel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDRepairsParallelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDRepairsParallelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDRepairsParallelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterIDSuspended put cluster cluster ID suspended API
*/
func (a *Client) PutClusterClusterIDSuspended(params *PutClusterClusterIDSuspendedParams, opts ...ClientOption) (*PutClusterClusterIDSuspendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDSuspendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterIDSuspended",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/suspended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDSuspendedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDSuspendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDSuspendedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterIDTaskTaskTypeTaskID put cluster cluster ID task task type task ID API
*/
func (a *Client) PutClusterClusterIDTaskTaskTypeTaskID(params *PutClusterClusterIDTaskTaskTypeTaskIDParams, opts ...ClientOption) (*PutClusterClusterIDTaskTaskTypeTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDTaskTaskTypeTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterIDTaskTaskTypeTaskID",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/task/{task_type}/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDTaskTaskTypeTaskIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDTaskTaskTypeTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDTaskTaskTypeTaskIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterIDTaskTaskTypeTaskIDStart put cluster cluster ID task task type task ID start API
*/
func (a *Client) PutClusterClusterIDTaskTaskTypeTaskIDStart(params *PutClusterClusterIDTaskTaskTypeTaskIDStartParams, opts ...ClientOption) (*PutClusterClusterIDTaskTaskTypeTaskIDStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDTaskTaskTypeTaskIDStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterIDTaskTaskTypeTaskIDStart",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/task/{task_type}/{task_id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDTaskTaskTypeTaskIDStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDTaskTaskTypeTaskIDStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDTaskTaskTypeTaskIDStartDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutClusterClusterIDTaskTaskTypeTaskIDStop put cluster cluster ID task task type task ID stop API
*/
func (a *Client) PutClusterClusterIDTaskTaskTypeTaskIDStop(params *PutClusterClusterIDTaskTaskTypeTaskIDStopParams, opts ...ClientOption) (*PutClusterClusterIDTaskTaskTypeTaskIDStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDTaskTaskTypeTaskIDStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutClusterClusterIDTaskTaskTypeTaskIDStop",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/task/{task_type}/{task_id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDTaskTaskTypeTaskIDStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutClusterClusterIDTaskTaskTypeTaskIDStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutClusterClusterIDTaskTaskTypeTaskIDStopDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
