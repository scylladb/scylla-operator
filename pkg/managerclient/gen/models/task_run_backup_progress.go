// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TaskRunBackupProgress task run backup progress
//
// swagger:model TaskRunBackupProgress
type TaskRunBackupProgress struct {

	// progress
	Progress *BackupProgress `json:"progress,omitempty"`

	// run
	Run *TaskRun `json:"run,omitempty"`
}

// Validate validates this task run backup progress
func (m *TaskRunBackupProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskRunBackupProgress) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *TaskRunBackupProgress) validateRun(formats strfmt.Registry) error {
	if swag.IsZero(m.Run) { // not required
		return nil
	}

	if m.Run != nil {
		if err := m.Run.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("run")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this task run backup progress based on the context it is used
func (m *TaskRunBackupProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskRunBackupProgress) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {
		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *TaskRunBackupProgress) contextValidateRun(ctx context.Context, formats strfmt.Registry) error {

	if m.Run != nil {
		if err := m.Run.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("run")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskRunBackupProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskRunBackupProgress) UnmarshalBinary(b []byte) error {
	var res TaskRunBackupProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
