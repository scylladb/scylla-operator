// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidateBackupProgress validate backup progress
//
// swagger:model ValidateBackupProgress
type ValidateBackupProgress struct {

	// broken snapshots
	BrokenSnapshots []string `json:"broken_snapshots"`

	// completed at
	// Format: date-time
	CompletedAt *strfmt.DateTime `json:"completed_at,omitempty"`

	// dc
	Dc string `json:"dc,omitempty"`

	// deleted files
	DeletedFiles int64 `json:"deleted_files,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// manifests
	Manifests int64 `json:"manifests,omitempty"`

	// missing files
	MissingFiles int64 `json:"missing_files,omitempty"`

	// orphaned bytes
	OrphanedBytes int64 `json:"orphaned_bytes,omitempty"`

	// orphaned files
	OrphanedFiles int64 `json:"orphaned_files,omitempty"`

	// scanned files
	ScannedFiles int64 `json:"scanned_files,omitempty"`

	// started at
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at,omitempty"`
}

// Validate validates this validate backup progress
func (m *ValidateBackupProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidateBackupProgress) validateCompletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_at", "body", "date-time", m.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ValidateBackupProgress) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this validate backup progress based on context it is used
func (m *ValidateBackupProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidateBackupProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidateBackupProgress) UnmarshalBinary(b []byte) error {
	var res ValidateBackupProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
