// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteClusterClusterIDBackupsParams creates a new DeleteClusterClusterIDBackupsParams object
// with the default values initialized.
func NewDeleteClusterClusterIDBackupsParams() *DeleteClusterClusterIDBackupsParams {
	var ()
	return &DeleteClusterClusterIDBackupsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteClusterClusterIDBackupsParamsWithTimeout creates a new DeleteClusterClusterIDBackupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteClusterClusterIDBackupsParamsWithTimeout(timeout time.Duration) *DeleteClusterClusterIDBackupsParams {
	var ()
	return &DeleteClusterClusterIDBackupsParams{

		timeout: timeout,
	}
}

// NewDeleteClusterClusterIDBackupsParamsWithContext creates a new DeleteClusterClusterIDBackupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteClusterClusterIDBackupsParamsWithContext(ctx context.Context) *DeleteClusterClusterIDBackupsParams {
	var ()
	return &DeleteClusterClusterIDBackupsParams{

		Context: ctx,
	}
}

// NewDeleteClusterClusterIDBackupsParamsWithHTTPClient creates a new DeleteClusterClusterIDBackupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteClusterClusterIDBackupsParamsWithHTTPClient(client *http.Client) *DeleteClusterClusterIDBackupsParams {
	var ()
	return &DeleteClusterClusterIDBackupsParams{
		HTTPClient: client,
	}
}

/*
DeleteClusterClusterIDBackupsParams contains all the parameters to send to the API endpoint
for the delete cluster cluster ID backups operation typically these are written to a http.Request
*/
type DeleteClusterClusterIDBackupsParams struct {

	/*ClusterID*/
	ClusterID string
	/*Locations*/
	Locations []string
	/*SnapshotTag*/
	SnapshotTag string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithTimeout(timeout time.Duration) *DeleteClusterClusterIDBackupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithContext(ctx context.Context) *DeleteClusterClusterIDBackupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithHTTPClient(client *http.Client) *DeleteClusterClusterIDBackupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithClusterID(clusterID string) *DeleteClusterClusterIDBackupsParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithLocations adds the locations to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithLocations(locations []string) *DeleteClusterClusterIDBackupsParams {
	o.SetLocations(locations)
	return o
}

// SetLocations adds the locations to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetLocations(locations []string) {
	o.Locations = locations
}

// WithSnapshotTag adds the snapshotTag to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) WithSnapshotTag(snapshotTag string) *DeleteClusterClusterIDBackupsParams {
	o.SetSnapshotTag(snapshotTag)
	return o
}

// SetSnapshotTag adds the snapshotTag to the delete cluster cluster ID backups params
func (o *DeleteClusterClusterIDBackupsParams) SetSnapshotTag(snapshotTag string) {
	o.SnapshotTag = snapshotTag
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteClusterClusterIDBackupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	valuesLocations := o.Locations

	joinedLocations := swag.JoinByFormat(valuesLocations, "")
	// query array param locations
	if err := r.SetQueryParam("locations", joinedLocations...); err != nil {
		return err
	}

	// query param snapshot_tag
	qrSnapshotTag := o.SnapshotTag
	qSnapshotTag := qrSnapshotTag
	if qSnapshotTag != "" {
		if err := r.SetQueryParam("snapshot_tag", qSnapshotTag); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
