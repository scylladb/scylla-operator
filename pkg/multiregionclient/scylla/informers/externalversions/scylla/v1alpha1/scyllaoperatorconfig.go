// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	scyllav1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	versioned "github.com/scylladb/scylla-operator/pkg/multiregionclient/scylla/clientset/versioned"
	internalinterfaces "github.com/scylladb/scylla-operator/pkg/multiregionclient/scylla/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/scylladb/scylla-operator/pkg/multiregionclient/scylla/listers/scylla/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ScyllaOperatorConfigRemoteInformer provides access to a shared informer and lister for
// ScyllaOperatorConfigs.
type ScyllaOperatorConfigRemoteInformer interface {
	Informer() internalinterfaces.UnboundInformer
	Lister() v1alpha1.ScyllaOperatorConfigRemoteLister
}

type scyllaOperatorConfigRemoteInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewScyllaOperatorConfigInformer constructs a new informer for ScyllaOperatorConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewScyllaOperatorConfigInformer(client versioned.RemoteInterface, datacenter string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredScyllaOperatorConfigInformer(client, datacenter, resyncPeriod, indexers, nil)
}

// NewFilteredScyllaOperatorConfigInformer constructs a new informer for ScyllaOperatorConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredScyllaOperatorConfigInformer(client versioned.RemoteInterface, datacenter string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				c, err := client.Datacenter(datacenter)
				if err != nil {
					return nil, err
				}
				return c.ScyllaV1alpha1().ScyllaOperatorConfigs().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				c, err := client.Datacenter(datacenter)
				if err != nil {
					return nil, err
				}
				return c.ScyllaV1alpha1().ScyllaOperatorConfigs().Watch(context.TODO(), options)
			},
		},
		&scyllav1alpha1.ScyllaOperatorConfig{},
		resyncPeriod,
		indexers,
	)
}


func (f *scyllaOperatorConfigRemoteInformer) Informer() internalinterfaces.UnboundInformer {
	return f.factory.UnboundInformerFor(&scyllav1alpha1.ScyllaOperatorConfig{}, func() internalinterfaces.UnboundInformer{ return &scyllaOperatorConfigUnboundInformer{
		factory:          f.factory,
		tweakListOptions: f.tweakListOptions,
	}})
}

func (f *scyllaOperatorConfigRemoteInformer) Lister() v1alpha1.ScyllaOperatorConfigRemoteLister {
	return v1alpha1.NewScyllaOperatorConfigRemoteLister(f.Informer().Datacenter)
}


type scyllaOperatorConfigUnboundInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}


func (f *scyllaOperatorConfigUnboundInformer) defaultInformer(client versioned.RemoteInterface, datacenter string, resyncPeriod time.Duration, eventHandlers []cache.ResourceEventHandler) cache.SharedIndexInformer {
	informer := NewFilteredScyllaOperatorConfigInformer(client, datacenter, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
	for _, eventHandler := range eventHandlers {
		informer.AddEventHandler(eventHandler)
	}
	return informer
}

func (f *scyllaOperatorConfigUnboundInformer) Datacenter(datacenter string) cache.SharedIndexInformer {
	return f.factory.InformerFor(&scyllav1alpha1.ScyllaOperatorConfig{}, datacenter, f.defaultInformer)
}

func (f *scyllaOperatorConfigUnboundInformer) HasSynced() bool {
	return f.factory.HasSyncedFor(&scyllav1alpha1.ScyllaOperatorConfig{})
}

func (f *scyllaOperatorConfigUnboundInformer) AddEventHandler(handler cache.ResourceEventHandler) {
	f.factory.AddEventHandlerFor(&scyllav1alpha1.ScyllaOperatorConfig{}, handler)
}