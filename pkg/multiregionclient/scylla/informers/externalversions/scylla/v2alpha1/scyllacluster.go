// Code generated by informer-gen. DO NOT EDIT.

package v2alpha1

import (
	"context"
	time "time"

	scyllav2alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v2alpha1"
	versioned "github.com/scylladb/scylla-operator/pkg/multiregionclient/scylla/clientset/versioned"
	internalinterfaces "github.com/scylladb/scylla-operator/pkg/multiregionclient/scylla/informers/externalversions/internalinterfaces"
	v2alpha1 "github.com/scylladb/scylla-operator/pkg/multiregionclient/scylla/listers/scylla/v2alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

type ScyllaClusterRemoteInformer interface {
	Informer() internalinterfaces.UnboundInformer
	Lister() v2alpha1.ScyllaClusterRemoteLister
}

type scyllaClusterRemoteInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewScyllaClusterInformer constructs a new informer for ScyllaCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewScyllaClusterInformer(client versioned.RemoteInterface, datacenter string,  namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredScyllaClusterInformer(client, datacenter, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredScyllaClusterInformer constructs a new informer for ScyllaCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredScyllaClusterInformer(client versioned.RemoteInterface, datacenter string,  namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				c, err := client.Datacenter(datacenter)
				if err != nil {
					return nil, err
				}
				return c.ScyllaV2alpha1().ScyllaClusters(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				c, err := client.Datacenter(datacenter)
				if err != nil {
					return nil, err
				}
				return c.ScyllaV2alpha1().ScyllaClusters(namespace).Watch(context.TODO(), options)
			},
		},
		&scyllav2alpha1.ScyllaCluster{},
		resyncPeriod,
		indexers,
	)
}


func (f *scyllaClusterRemoteInformer) Informer() internalinterfaces.UnboundInformer {
	return f.factory.UnboundInformerFor(&scyllav2alpha1.ScyllaCluster{}, func() internalinterfaces.UnboundInformer{ return &scyllaClusterUnboundInformer{
		factory:          f.factory,
		tweakListOptions: f.tweakListOptions,
		namespace:        f.namespace,
	}})
}

func (f *scyllaClusterRemoteInformer) Lister() v2alpha1.ScyllaClusterRemoteLister {
	return v2alpha1.NewScyllaClusterRemoteLister(f.Informer().Datacenter)
}

type scyllaClusterUnboundInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}


func (f *scyllaClusterUnboundInformer) defaultInformer(client versioned.RemoteInterface, datacenter string, resyncPeriod time.Duration, eventHandlers []cache.ResourceEventHandler) cache.SharedIndexInformer {
	informer := NewFilteredScyllaClusterInformer(client, datacenter, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
	for _, eventHandler := range eventHandlers {
		informer.AddEventHandler(eventHandler)
	}
	return informer
}

func (f *scyllaClusterUnboundInformer) Datacenter(datacenter string) cache.SharedIndexInformer {
	return f.factory.InformerFor(&scyllav2alpha1.ScyllaCluster{}, datacenter, f.defaultInformer)
}

func (f *scyllaClusterUnboundInformer) HasSynced() bool {
	return f.factory.HasSyncedFor(&scyllav2alpha1.ScyllaCluster{})
}

func (f *scyllaClusterUnboundInformer) AddEventHandler(handler cache.ResourceEventHandler) {
	f.factory.AddEventHandlerFor(&scyllav2alpha1.ScyllaCluster{}, handler)
}