// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scylladb/scylla-operator/pkg/api/scylla/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

type NodeConfigRemoteLister interface {
	Datacenter(string) NodeConfigLister
}

type nodeConfigRemoteLister struct {
	makeInformer func(string) cache.SharedIndexInformer
}

func (s *nodeConfigRemoteLister) Datacenter(datacenter string) NodeConfigLister {
	return NewNodeConfigLister(s.makeInformer(datacenter).GetIndexer())
}

func NewNodeConfigRemoteLister(f func(string)cache.SharedIndexInformer) *nodeConfigRemoteLister {
	return &nodeConfigRemoteLister{makeInformer: f}
}

// NodeConfigLister helps list NodeConfigs.
// All objects returned here must be treated as read-only.
type NodeConfigLister interface {
	// List lists all NodeConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeConfig, err error)
	// Get retrieves the NodeConfig from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeConfig, error)
	NodeConfigListerExpansion
}

// nodeConfigLister implements the NodeConfigLister interface.
type nodeConfigLister struct {
	indexer cache.Indexer
}

// NewNodeConfigLister returns a new NodeConfigLister.
func NewNodeConfigLister(indexer cache.Indexer) NodeConfigLister {
	return &nodeConfigLister{indexer: indexer}
}

// List lists all NodeConfigs in the indexer.
func (s *nodeConfigLister) List(selector labels.Selector) (ret []*v1alpha1.NodeConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeConfig))
	})
	return ret, err
}

// Get retrieves the NodeConfig from the index for a given name.
func (s *nodeConfigLister) Get(name string) (*v1alpha1.NodeConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodeconfig"), name)
	}
	return obj.(*v1alpha1.NodeConfig), nil
}
