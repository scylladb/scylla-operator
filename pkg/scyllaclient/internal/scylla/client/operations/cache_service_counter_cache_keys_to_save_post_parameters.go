// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCacheServiceCounterCacheKeysToSavePostParams creates a new CacheServiceCounterCacheKeysToSavePostParams object
// with the default values initialized.
func NewCacheServiceCounterCacheKeysToSavePostParams() *CacheServiceCounterCacheKeysToSavePostParams {
	var ()
	return &CacheServiceCounterCacheKeysToSavePostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCacheServiceCounterCacheKeysToSavePostParamsWithTimeout creates a new CacheServiceCounterCacheKeysToSavePostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCacheServiceCounterCacheKeysToSavePostParamsWithTimeout(timeout time.Duration) *CacheServiceCounterCacheKeysToSavePostParams {
	var ()
	return &CacheServiceCounterCacheKeysToSavePostParams{

		timeout: timeout,
	}
}

// NewCacheServiceCounterCacheKeysToSavePostParamsWithContext creates a new CacheServiceCounterCacheKeysToSavePostParams object
// with the default values initialized, and the ability to set a context for a request
func NewCacheServiceCounterCacheKeysToSavePostParamsWithContext(ctx context.Context) *CacheServiceCounterCacheKeysToSavePostParams {
	var ()
	return &CacheServiceCounterCacheKeysToSavePostParams{

		Context: ctx,
	}
}

// NewCacheServiceCounterCacheKeysToSavePostParamsWithHTTPClient creates a new CacheServiceCounterCacheKeysToSavePostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCacheServiceCounterCacheKeysToSavePostParamsWithHTTPClient(client *http.Client) *CacheServiceCounterCacheKeysToSavePostParams {
	var ()
	return &CacheServiceCounterCacheKeysToSavePostParams{
		HTTPClient: client,
	}
}

/*
CacheServiceCounterCacheKeysToSavePostParams contains all the parameters to send to the API endpoint
for the cache service counter cache keys to save post operation typically these are written to a http.Request
*/
type CacheServiceCounterCacheKeysToSavePostParams struct {

	/*Cckts
	  counter cache keys to save

	*/
	Cckts int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) WithTimeout(timeout time.Duration) *CacheServiceCounterCacheKeysToSavePostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) WithContext(ctx context.Context) *CacheServiceCounterCacheKeysToSavePostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) WithHTTPClient(client *http.Client) *CacheServiceCounterCacheKeysToSavePostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCckts adds the cckts to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) WithCckts(cckts int32) *CacheServiceCounterCacheKeysToSavePostParams {
	o.SetCckts(cckts)
	return o
}

// SetCckts adds the cckts to the cache service counter cache keys to save post params
func (o *CacheServiceCounterCacheKeysToSavePostParams) SetCckts(cckts int32) {
	o.Cckts = cckts
}

// WriteToRequest writes these params to a swagger request
func (o *CacheServiceCounterCacheKeysToSavePostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cckts
	qrCckts := o.Cckts
	qCckts := swag.FormatInt32(qrCckts)
	if qCckts != "" {
		if err := r.SetQueryParam("cckts", qCckts); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
