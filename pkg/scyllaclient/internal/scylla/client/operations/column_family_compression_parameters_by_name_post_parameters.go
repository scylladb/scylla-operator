// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewColumnFamilyCompressionParametersByNamePostParams creates a new ColumnFamilyCompressionParametersByNamePostParams object
// with the default values initialized.
func NewColumnFamilyCompressionParametersByNamePostParams() *ColumnFamilyCompressionParametersByNamePostParams {
	var ()
	return &ColumnFamilyCompressionParametersByNamePostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewColumnFamilyCompressionParametersByNamePostParamsWithTimeout creates a new ColumnFamilyCompressionParametersByNamePostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewColumnFamilyCompressionParametersByNamePostParamsWithTimeout(timeout time.Duration) *ColumnFamilyCompressionParametersByNamePostParams {
	var ()
	return &ColumnFamilyCompressionParametersByNamePostParams{

		timeout: timeout,
	}
}

// NewColumnFamilyCompressionParametersByNamePostParamsWithContext creates a new ColumnFamilyCompressionParametersByNamePostParams object
// with the default values initialized, and the ability to set a context for a request
func NewColumnFamilyCompressionParametersByNamePostParamsWithContext(ctx context.Context) *ColumnFamilyCompressionParametersByNamePostParams {
	var ()
	return &ColumnFamilyCompressionParametersByNamePostParams{

		Context: ctx,
	}
}

// NewColumnFamilyCompressionParametersByNamePostParamsWithHTTPClient creates a new ColumnFamilyCompressionParametersByNamePostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewColumnFamilyCompressionParametersByNamePostParamsWithHTTPClient(client *http.Client) *ColumnFamilyCompressionParametersByNamePostParams {
	var ()
	return &ColumnFamilyCompressionParametersByNamePostParams{
		HTTPClient: client,
	}
}

/*
ColumnFamilyCompressionParametersByNamePostParams contains all the parameters to send to the API endpoint
for the column family compression parameters by name post operation typically these are written to a http.Request
*/
type ColumnFamilyCompressionParametersByNamePostParams struct {

	/*Name
	  The column family name in keyspace:name format

	*/
	Name string
	/*Opts
	  The options to set

	*/
	Opts string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) WithTimeout(timeout time.Duration) *ColumnFamilyCompressionParametersByNamePostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) WithContext(ctx context.Context) *ColumnFamilyCompressionParametersByNamePostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) WithHTTPClient(client *http.Client) *ColumnFamilyCompressionParametersByNamePostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) WithName(name string) *ColumnFamilyCompressionParametersByNamePostParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) SetName(name string) {
	o.Name = name
}

// WithOpts adds the opts to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) WithOpts(opts string) *ColumnFamilyCompressionParametersByNamePostParams {
	o.SetOpts(opts)
	return o
}

// SetOpts adds the opts to the column family compression parameters by name post params
func (o *ColumnFamilyCompressionParametersByNamePostParams) SetOpts(opts string) {
	o.Opts = opts
}

// WriteToRequest writes these params to a swagger request
func (o *ColumnFamilyCompressionParametersByNamePostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// query param opts
	qrOpts := o.Opts
	qOpts := qrOpts
	if qOpts != "" {
		if err := r.SetQueryParam("opts", qOpts); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
