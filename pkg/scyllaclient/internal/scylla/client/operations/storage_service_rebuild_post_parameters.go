// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStorageServiceRebuildPostParams creates a new StorageServiceRebuildPostParams object
// with the default values initialized.
func NewStorageServiceRebuildPostParams() *StorageServiceRebuildPostParams {
	var ()
	return &StorageServiceRebuildPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStorageServiceRebuildPostParamsWithTimeout creates a new StorageServiceRebuildPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStorageServiceRebuildPostParamsWithTimeout(timeout time.Duration) *StorageServiceRebuildPostParams {
	var ()
	return &StorageServiceRebuildPostParams{

		timeout: timeout,
	}
}

// NewStorageServiceRebuildPostParamsWithContext creates a new StorageServiceRebuildPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewStorageServiceRebuildPostParamsWithContext(ctx context.Context) *StorageServiceRebuildPostParams {
	var ()
	return &StorageServiceRebuildPostParams{

		Context: ctx,
	}
}

// NewStorageServiceRebuildPostParamsWithHTTPClient creates a new StorageServiceRebuildPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStorageServiceRebuildPostParamsWithHTTPClient(client *http.Client) *StorageServiceRebuildPostParams {
	var ()
	return &StorageServiceRebuildPostParams{
		HTTPClient: client,
	}
}

/*
StorageServiceRebuildPostParams contains all the parameters to send to the API endpoint
for the storage service rebuild post operation typically these are written to a http.Request
*/
type StorageServiceRebuildPostParams struct {

	/*SourceDc
	  Name of DC from which to select sources for streaming or none to pick any node

	*/
	SourceDc *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) WithTimeout(timeout time.Duration) *StorageServiceRebuildPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) WithContext(ctx context.Context) *StorageServiceRebuildPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) WithHTTPClient(client *http.Client) *StorageServiceRebuildPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSourceDc adds the sourceDc to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) WithSourceDc(sourceDc *string) *StorageServiceRebuildPostParams {
	o.SetSourceDc(sourceDc)
	return o
}

// SetSourceDc adds the sourceDc to the storage service rebuild post params
func (o *StorageServiceRebuildPostParams) SetSourceDc(sourceDc *string) {
	o.SourceDc = sourceDc
}

// WriteToRequest writes these params to a swagger request
func (o *StorageServiceRebuildPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SourceDc != nil {

		// query param source_dc
		var qrSourceDc string
		if o.SourceDc != nil {
			qrSourceDc = *o.SourceDc
		}
		qSourceDc := qrSourceDc
		if qSourceDc != "" {
			if err := r.SetQueryParam("source_dc", qSourceDc); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
