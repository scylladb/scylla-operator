// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStorageServiceRemoveNodePostParams creates a new StorageServiceRemoveNodePostParams object
// with the default values initialized.
func NewStorageServiceRemoveNodePostParams() *StorageServiceRemoveNodePostParams {
	var ()
	return &StorageServiceRemoveNodePostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStorageServiceRemoveNodePostParamsWithTimeout creates a new StorageServiceRemoveNodePostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStorageServiceRemoveNodePostParamsWithTimeout(timeout time.Duration) *StorageServiceRemoveNodePostParams {
	var ()
	return &StorageServiceRemoveNodePostParams{

		timeout: timeout,
	}
}

// NewStorageServiceRemoveNodePostParamsWithContext creates a new StorageServiceRemoveNodePostParams object
// with the default values initialized, and the ability to set a context for a request
func NewStorageServiceRemoveNodePostParamsWithContext(ctx context.Context) *StorageServiceRemoveNodePostParams {
	var ()
	return &StorageServiceRemoveNodePostParams{

		Context: ctx,
	}
}

// NewStorageServiceRemoveNodePostParamsWithHTTPClient creates a new StorageServiceRemoveNodePostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStorageServiceRemoveNodePostParamsWithHTTPClient(client *http.Client) *StorageServiceRemoveNodePostParams {
	var ()
	return &StorageServiceRemoveNodePostParams{
		HTTPClient: client,
	}
}

/*
StorageServiceRemoveNodePostParams contains all the parameters to send to the API endpoint
for the storage service remove node post operation typically these are written to a http.Request
*/
type StorageServiceRemoveNodePostParams struct {

	/*HostID
	  Remove the node with host_id from the cluster

	*/
	HostID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) WithTimeout(timeout time.Duration) *StorageServiceRemoveNodePostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) WithContext(ctx context.Context) *StorageServiceRemoveNodePostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) WithHTTPClient(client *http.Client) *StorageServiceRemoveNodePostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHostID adds the hostID to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) WithHostID(hostID string) *StorageServiceRemoveNodePostParams {
	o.SetHostID(hostID)
	return o
}

// SetHostID adds the hostId to the storage service remove node post params
func (o *StorageServiceRemoveNodePostParams) SetHostID(hostID string) {
	o.HostID = hostID
}

// WriteToRequest writes these params to a swagger request
func (o *StorageServiceRemoveNodePostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param host_id
	qrHostID := o.HostID
	qHostID := qrHostID
	if qHostID != "" {
		if err := r.SetQueryParam("host_id", qHostID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
