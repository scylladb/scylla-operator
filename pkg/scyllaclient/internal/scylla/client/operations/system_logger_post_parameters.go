// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSystemLoggerPostParams creates a new SystemLoggerPostParams object
// with the default values initialized.
func NewSystemLoggerPostParams() *SystemLoggerPostParams {
	var ()
	return &SystemLoggerPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSystemLoggerPostParamsWithTimeout creates a new SystemLoggerPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSystemLoggerPostParamsWithTimeout(timeout time.Duration) *SystemLoggerPostParams {
	var ()
	return &SystemLoggerPostParams{

		timeout: timeout,
	}
}

// NewSystemLoggerPostParamsWithContext creates a new SystemLoggerPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewSystemLoggerPostParamsWithContext(ctx context.Context) *SystemLoggerPostParams {
	var ()
	return &SystemLoggerPostParams{

		Context: ctx,
	}
}

// NewSystemLoggerPostParamsWithHTTPClient creates a new SystemLoggerPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSystemLoggerPostParamsWithHTTPClient(client *http.Client) *SystemLoggerPostParams {
	var ()
	return &SystemLoggerPostParams{
		HTTPClient: client,
	}
}

/*
SystemLoggerPostParams contains all the parameters to send to the API endpoint
for the system logger post operation typically these are written to a http.Request
*/
type SystemLoggerPostParams struct {

	/*Level
	  The new log level

	*/
	Level string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the system logger post params
func (o *SystemLoggerPostParams) WithTimeout(timeout time.Duration) *SystemLoggerPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the system logger post params
func (o *SystemLoggerPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the system logger post params
func (o *SystemLoggerPostParams) WithContext(ctx context.Context) *SystemLoggerPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the system logger post params
func (o *SystemLoggerPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the system logger post params
func (o *SystemLoggerPostParams) WithHTTPClient(client *http.Client) *SystemLoggerPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the system logger post params
func (o *SystemLoggerPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLevel adds the level to the system logger post params
func (o *SystemLoggerPostParams) WithLevel(level string) *SystemLoggerPostParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the system logger post params
func (o *SystemLoggerPostParams) SetLevel(level string) {
	o.Level = level
}

// WriteToRequest writes these params to a swagger request
func (o *SystemLoggerPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param level
	qrLevel := o.Level
	qLevel := qrLevel
	if qLevel != "" {
		if err := r.SetQueryParam("level", qLevel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
