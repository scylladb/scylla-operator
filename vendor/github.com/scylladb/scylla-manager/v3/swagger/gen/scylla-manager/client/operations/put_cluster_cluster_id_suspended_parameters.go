// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/scylladb/scylla-manager/v3/swagger/gen/scylla-manager/models"
)

// NewPutClusterClusterIDSuspendedParams creates a new PutClusterClusterIDSuspendedParams object
// with the default values initialized.
func NewPutClusterClusterIDSuspendedParams() *PutClusterClusterIDSuspendedParams {
	var ()
	return &PutClusterClusterIDSuspendedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutClusterClusterIDSuspendedParamsWithTimeout creates a new PutClusterClusterIDSuspendedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutClusterClusterIDSuspendedParamsWithTimeout(timeout time.Duration) *PutClusterClusterIDSuspendedParams {
	var ()
	return &PutClusterClusterIDSuspendedParams{

		timeout: timeout,
	}
}

// NewPutClusterClusterIDSuspendedParamsWithContext creates a new PutClusterClusterIDSuspendedParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutClusterClusterIDSuspendedParamsWithContext(ctx context.Context) *PutClusterClusterIDSuspendedParams {
	var ()
	return &PutClusterClusterIDSuspendedParams{

		Context: ctx,
	}
}

// NewPutClusterClusterIDSuspendedParamsWithHTTPClient creates a new PutClusterClusterIDSuspendedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutClusterClusterIDSuspendedParamsWithHTTPClient(client *http.Client) *PutClusterClusterIDSuspendedParams {
	var ()
	return &PutClusterClusterIDSuspendedParams{
		HTTPClient: client,
	}
}

/*
PutClusterClusterIDSuspendedParams contains all the parameters to send to the API endpoint
for the put cluster cluster ID suspended operation typically these are written to a http.Request
*/
type PutClusterClusterIDSuspendedParams struct {

	/*AllowTaskType*/
	AllowTaskType *string
	/*ClusterID*/
	ClusterID string
	/*StartTasks*/
	StartTasks bool
	/*Suspended*/
	Suspended models.Suspended

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithTimeout(timeout time.Duration) *PutClusterClusterIDSuspendedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithContext(ctx context.Context) *PutClusterClusterIDSuspendedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithHTTPClient(client *http.Client) *PutClusterClusterIDSuspendedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowTaskType adds the allowTaskType to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithAllowTaskType(allowTaskType *string) *PutClusterClusterIDSuspendedParams {
	o.SetAllowTaskType(allowTaskType)
	return o
}

// SetAllowTaskType adds the allowTaskType to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetAllowTaskType(allowTaskType *string) {
	o.AllowTaskType = allowTaskType
}

// WithClusterID adds the clusterID to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithClusterID(clusterID string) *PutClusterClusterIDSuspendedParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithStartTasks adds the startTasks to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithStartTasks(startTasks bool) *PutClusterClusterIDSuspendedParams {
	o.SetStartTasks(startTasks)
	return o
}

// SetStartTasks adds the startTasks to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetStartTasks(startTasks bool) {
	o.StartTasks = startTasks
}

// WithSuspended adds the suspended to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) WithSuspended(suspended models.Suspended) *PutClusterClusterIDSuspendedParams {
	o.SetSuspended(suspended)
	return o
}

// SetSuspended adds the suspended to the put cluster cluster ID suspended params
func (o *PutClusterClusterIDSuspendedParams) SetSuspended(suspended models.Suspended) {
	o.Suspended = suspended
}

// WriteToRequest writes these params to a swagger request
func (o *PutClusterClusterIDSuspendedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowTaskType != nil {

		// query param allow_task_type
		var qrAllowTaskType string
		if o.AllowTaskType != nil {
			qrAllowTaskType = *o.AllowTaskType
		}
		qAllowTaskType := qrAllowTaskType
		if qAllowTaskType != "" {
			if err := r.SetQueryParam("allow_task_type", qAllowTaskType); err != nil {
				return err
			}
		}

	}

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	// query param start_tasks
	qrStartTasks := o.StartTasks
	qStartTasks := swag.FormatBool(qrStartTasks)
	if qStartTasks != "" {
		if err := r.SetQueryParam("start_tasks", qStartTasks); err != nil {
			return err
		}
	}

	if err := r.SetBodyParam(o.Suspended); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
